/*! @algolia/autocomplete-preset-algolia 1.0.0-alpha.38 | MIT License | Â© Algolia, Inc. and contributors | https://github.com/algolia/autocomplete.js */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['@algolia/autocomplete-preset-algolia'] = {}));
}(this, (function (exports) { 'use strict';

  var warnCache = {
    current: {}
  };
  /**
   * Logs a warning if the condition is not met.
   * This is used to log issues in development environment only.
   */

  function warn(condition, message) {

    if (condition) {
      return;
    }

    var sanitizedMessage = message.trim();
    var hasAlreadyPrinted = warnCache.current[sanitizedMessage];

    if (!hasAlreadyPrinted) {
      warnCache.current[sanitizedMessage] = true; // eslint-disable-next-line no-console

      console.warn("[Autocomplete] ".concat(sanitizedMessage));
    }
  }

  function getAttributeValueByPath(hit, path) {
    var parts = path.split('.');
    var value = parts.reduce(function (current, key) {
      return current && current[key];
    }, hit);
    return value;
  }

  var HIGHLIGHT_PRE_TAG = '__aa-highlight__';
  var HIGHLIGHT_POST_TAG = '__/aa-highlight__';

  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };
  function parseAttribute(_ref) {
    var highlightedValue = _ref.highlightedValue,
        _ref$ignoreEscape = _ref.ignoreEscape,
        ignoreEscape = _ref$ignoreEscape === void 0 ? [] : _ref$ignoreEscape;
    var unescapedHtmlRegex = new RegExp("[".concat(Object.keys(htmlEscapes).filter(function (character) {
      return ignoreEscape.indexOf(character) === -1;
    }).join(''), "]"), 'g');
    var hasUnescapedHtmlRegex = RegExp(unescapedHtmlRegex.source);

    function escape(value) {
      return hasUnescapedHtmlRegex.test(value) ? value.replace(unescapedHtmlRegex, function (key) {
        return htmlEscapes[key];
      }) : value;
    }

    var splitByPreTag = highlightedValue.split(HIGHLIGHT_PRE_TAG);
    var firstValue = splitByPreTag.shift();
    var elements = !firstValue ? [] : [{
      value: escape(firstValue),
      isHighlighted: false
    }];
    splitByPreTag.forEach(function (split) {
      var splitByPostTag = split.split(HIGHLIGHT_POST_TAG);
      elements.push({
        value: escape(splitByPostTag[0]),
        isHighlighted: true
      });

      if (splitByPostTag[1] !== '') {
        elements.push({
          value: escape(splitByPostTag[1]),
          isHighlighted: false
        });
      }
    });
    return elements;
  }

  function parseAlgoliaHitHighlight(_ref) {
    var hit = _ref.hit,
        attribute = _ref.attribute,
        ignoreEscape = _ref.ignoreEscape;
    var path = "_highlightResult.".concat(attribute, ".value");
    var highlightedValue = getAttributeValueByPath(hit, path);

    if (typeof highlightedValue !== 'string') {
      "development" !== 'production' ? warn(false, "The attribute ".concat(JSON.stringify(path), " does not exist on the hit. Did you set it in `attributesToHighlight`?") + '\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToHighlight/') : void 0;
      highlightedValue = getAttributeValueByPath(hit, attribute) || '';
    }

    return parseAttribute({
      highlightedValue: highlightedValue,
      ignoreEscape: ignoreEscape
    });
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function reverseHighlightedParts(parts) {
    // We don't want to highlight the whole word when no parts match.
    if (!parts.some(function (part) {
      return part.isHighlighted;
    })) {
      return parts.map(function (part) {
        return _objectSpread2(_objectSpread2({}, part), {}, {
          isHighlighted: false
        });
      });
    }

    return parts.map(function (part) {
      return _objectSpread2(_objectSpread2({}, part), {}, {
        isHighlighted: !part.isHighlighted
      });
    });
  }

  function parseAlgoliaHitReverseHighlight(props) {
    return reverseHighlightedParts(parseAlgoliaHitHighlight(props));
  }

  function parseAlgoliaHitSnippet(_ref) {
    var hit = _ref.hit,
        attribute = _ref.attribute,
        ignoreEscape = _ref.ignoreEscape;
    var path = "_snippetResult.".concat(attribute, ".value");
    var highlightedValue = getAttributeValueByPath(hit, path);

    if (typeof highlightedValue !== 'string') {
      "development" !== 'production' ? warn(false, "The attribute ".concat(JSON.stringify(path), " does not exist on the hit. Did you set it in `attributesToSnippet`?") + '\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToSnippet/') : void 0;
      highlightedValue = getAttributeValueByPath(hit, attribute) || '';
    }

    return parseAttribute({
      highlightedValue: highlightedValue,
      ignoreEscape: ignoreEscape
    });
  }

  function parseAlgoliaHitReverseSnippet(props) {
    return reverseHighlightedParts(parseAlgoliaHitSnippet(props));
  }

  var version = '1.0.0-alpha.38';

  function search(_ref) {
    var searchClient = _ref.searchClient,
        queries = _ref.queries;

    if (typeof searchClient.addAlgoliaAgent === 'function') {
      searchClient.addAlgoliaAgent('autocomplete-core', version);
    }

    return searchClient.search(queries.map(function (searchParameters) {
      var indexName = searchParameters.indexName,
          query = searchParameters.query,
          params = searchParameters.params;
      return {
        indexName: indexName,
        query: query,
        params: _objectSpread2({
          hitsPerPage: 5,
          highlightPreTag: HIGHLIGHT_PRE_TAG,
          highlightPostTag: HIGHLIGHT_POST_TAG
        }, params)
      };
    }));
  }

  function getAlgoliaHits(_ref) {
    var searchClient = _ref.searchClient,
        queries = _ref.queries;
    return search({
      searchClient: searchClient,
      queries: queries
    }).then(function (response) {
      var results = response.results;
      return results.map(function (result) {
        return result.hits.map(function (hit) {
          return _objectSpread2(_objectSpread2({}, hit), {}, {
            __autocomplete_indexName: result.index,
            __autocomplete_queryID: result.queryID
          });
        });
      });
    });
  }

  function getAlgoliaResults(_ref) {
    var searchClient = _ref.searchClient,
        queries = _ref.queries;
    return search({
      searchClient: searchClient,
      queries: queries
    }).then(function (response) {
      return response.results;
    });
  }

  exports.getAlgoliaHits = getAlgoliaHits;
  exports.getAlgoliaResults = getAlgoliaResults;
  exports.parseAlgoliaHitHighlight = parseAlgoliaHitHighlight;
  exports.parseAlgoliaHitReverseHighlight = parseAlgoliaHitReverseHighlight;
  exports.parseAlgoliaHitReverseSnippet = parseAlgoliaHitReverseSnippet;
  exports.parseAlgoliaHitSnippet = parseAlgoliaHitSnippet;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.development.js.map
