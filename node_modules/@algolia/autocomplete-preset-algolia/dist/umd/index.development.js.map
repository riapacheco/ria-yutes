{"version":3,"file":"index.development.js","sources":["../../../autocomplete-shared/dist/esm/warn.js","../../src/highlight/getAttributeValueByPath.ts","../../src/constants/index.ts","../../src/highlight/parseAttribute.ts","../../src/highlight/parseAlgoliaHitHighlight.ts","../../src/highlight/reverseHighlightedParts.ts","../../src/highlight/parseAlgoliaHitReverseHighlight.ts","../../src/highlight/parseAlgoliaHitSnippet.ts","../../src/highlight/parseAlgoliaHitReverseSnippet.ts","../../src/version.ts","../../src/search/search.ts","../../src/search/getAlgoliaHits.ts","../../src/search/getAlgoliaResults.ts"],"sourcesContent":["export var warnCache = {\n  current: {}\n};\n/**\n * Logs a warning if the condition is not met.\n * This is used to log issues in development environment only.\n */\n\nexport function warn(condition, message) {\n  if (!(process.env.NODE_ENV !== 'production')) {\n    return;\n  }\n\n  if (condition) {\n    return;\n  }\n\n  var sanitizedMessage = message.trim();\n  var hasAlreadyPrinted = warnCache.current[sanitizedMessage];\n\n  if (!hasAlreadyPrinted) {\n    warnCache.current[sanitizedMessage] = true; // eslint-disable-next-line no-console\n\n    console.warn(\"[Autocomplete] \".concat(sanitizedMessage));\n  }\n}","export function getAttributeValueByPath<THit>(hit: THit, path: string): any {\n  const parts = path.split('.');\n  const value = parts.reduce((current, key) => current && current[key], hit);\n\n  return value;\n}\n","export const HIGHLIGHT_PRE_TAG = '__aa-highlight__';\nexport const HIGHLIGHT_POST_TAG = '__/aa-highlight__';\n","import { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\n\nimport { ParsedAttribute } from './ParsedAttribute';\n\nconst htmlEscapes = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n};\n\ntype ParseAttributeParams = {\n  highlightedValue: string;\n  ignoreEscape?: string[];\n};\n\nexport function parseAttribute({\n  highlightedValue,\n  ignoreEscape = [],\n}: ParseAttributeParams): ParsedAttribute[] {\n  const unescapedHtmlRegex = new RegExp(\n    `[${Object.keys(htmlEscapes)\n      .filter((character) => ignoreEscape.indexOf(character) === -1)\n      .join('')}]`,\n    'g'\n  );\n  const hasUnescapedHtmlRegex = RegExp(unescapedHtmlRegex.source);\n\n  function escape(value: string) {\n    return hasUnescapedHtmlRegex.test(value)\n      ? value.replace(unescapedHtmlRegex, (key) => htmlEscapes[key])\n      : value;\n  }\n\n  const splitByPreTag = highlightedValue.split(HIGHLIGHT_PRE_TAG);\n  const firstValue = splitByPreTag.shift();\n  const elements = !firstValue\n    ? []\n    : [{ value: escape(firstValue), isHighlighted: false }];\n\n  splitByPreTag.forEach((split) => {\n    const splitByPostTag = split.split(HIGHLIGHT_POST_TAG);\n\n    elements.push({\n      value: escape(splitByPostTag[0]),\n      isHighlighted: true,\n    });\n\n    if (splitByPostTag[1] !== '') {\n      elements.push({\n        value: escape(splitByPostTag[1]),\n        isHighlighted: false,\n      });\n    }\n  });\n\n  return elements;\n}\n","import { warn } from '@algolia/autocomplete-shared';\nimport { Hit } from '@algolia/client-search';\n\nimport { getAttributeValueByPath } from './getAttributeValueByPath';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function parseAlgoliaHitHighlight<THit extends Hit<{}>>({\n  hit,\n  attribute,\n  ignoreEscape,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = `_highlightResult.${attribute}.value`;\n  let highlightedValue = getAttributeValueByPath(hit, path);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToHighlight\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToHighlight/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, attribute as string) || '';\n  }\n\n  return parseAttribute({\n    highlightedValue,\n    ignoreEscape,\n  });\n}\n","import { ParsedAttribute } from './ParsedAttribute';\n\nexport function reverseHighlightedParts(parts: ParsedAttribute[]) {\n  // We don't want to highlight the whole word when no parts match.\n  if (!parts.some((part) => part.isHighlighted)) {\n    return parts.map((part) => ({ ...part, isHighlighted: false }));\n  }\n\n  return parts.map((part) => ({ ...part, isHighlighted: !part.isHighlighted }));\n}\n","import { Hit } from '@algolia/client-search';\n\nimport { parseAlgoliaHitHighlight } from './parseAlgoliaHitHighlight';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\n\nexport function parseAlgoliaHitReverseHighlight<THit extends Hit<{}>>(\n  props: ParseAlgoliaHitParams<THit>\n): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitHighlight<THit>(props));\n}\n","import { warn } from '@algolia/autocomplete-shared';\nimport { Hit } from '@algolia/client-search';\n\nimport { getAttributeValueByPath } from './getAttributeValueByPath';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function parseAlgoliaHitSnippet<THit extends Hit<{}>>({\n  hit,\n  attribute,\n  ignoreEscape,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = `_snippetResult.${attribute}.value`;\n  let highlightedValue = getAttributeValueByPath(hit, path);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToSnippet\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToSnippet/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, attribute as string) || '';\n  }\n\n  return parseAttribute({\n    highlightedValue,\n    ignoreEscape,\n  });\n}\n","import { Hit } from '@algolia/client-search';\n\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAlgoliaHitSnippet } from './parseAlgoliaHitSnippet';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\n\nexport function parseAlgoliaHitReverseSnippet<THit extends Hit<{}>>(\n  props: ParseAlgoliaHitParams<THit>\n): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitSnippet<THit>(props));\n}\n","export const version = '1.0.0-alpha.38';\n","import { MultipleQueriesQuery } from '@algolia/client-search';\nimport { SearchClient } from 'algoliasearch/lite';\n\nimport { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\nimport { version } from '../version';\n\nexport interface SearchParams {\n  searchClient: SearchClient;\n  queries: MultipleQueriesQuery[];\n}\n\nexport function search<TRecord>({ searchClient, queries }: SearchParams) {\n  if (typeof searchClient.addAlgoliaAgent === 'function') {\n    searchClient.addAlgoliaAgent('autocomplete-core', version);\n  }\n\n  return searchClient.search<TRecord>(\n    queries.map((searchParameters) => {\n      const { indexName, query, params } = searchParameters;\n\n      return {\n        indexName,\n        query,\n        params: {\n          hitsPerPage: 5,\n          highlightPreTag: HIGHLIGHT_PRE_TAG,\n          highlightPostTag: HIGHLIGHT_POST_TAG,\n          ...params,\n        },\n      };\n    })\n  );\n}\n","import { Hit } from '@algolia/client-search';\n\nimport { search, SearchParams } from './search';\n\nexport function getAlgoliaHits<TRecord>({\n  searchClient,\n  queries,\n}: SearchParams): Promise<Array<Array<Hit<TRecord>>>> {\n  return search<TRecord>({ searchClient, queries }).then((response) => {\n    const results = response.results;\n\n    return results.map((result) =>\n      result.hits.map((hit) => {\n        return {\n          ...hit,\n          __autocomplete_indexName: result.index,\n          __autocomplete_queryID: result.queryID,\n        };\n      })\n    );\n  });\n}\n","import { SearchResponse } from '@algolia/client-search';\n\nimport { search, SearchParams } from './search';\n\nexport function getAlgoliaResults<TRecord>({\n  searchClient,\n  queries,\n}: SearchParams): Promise<Array<SearchResponse<TRecord>>> {\n  return search<TRecord>({ searchClient, queries }).then((response) => {\n    return response.results;\n  });\n}\n"],"names":["warnCache","current","warn","condition","message","sanitizedMessage","trim","hasAlreadyPrinted","console","concat","getAttributeValueByPath","hit","path","parts","split","value","reduce","key","HIGHLIGHT_PRE_TAG","HIGHLIGHT_POST_TAG","htmlEscapes","parseAttribute","highlightedValue","ignoreEscape","unescapedHtmlRegex","RegExp","Object","keys","filter","character","indexOf","join","hasUnescapedHtmlRegex","source","escape","test","replace","splitByPreTag","firstValue","shift","elements","isHighlighted","forEach","splitByPostTag","push","parseAlgoliaHitHighlight","attribute","process","JSON","stringify","reverseHighlightedParts","some","part","map","parseAlgoliaHitReverseHighlight","props","parseAlgoliaHitSnippet","parseAlgoliaHitReverseSnippet","version","search","searchClient","queries","addAlgoliaAgent","searchParameters","indexName","query","params","hitsPerPage","highlightPreTag","highlightPostTag","getAlgoliaHits","then","response","results","result","hits","__autocomplete_indexName","index","__autocomplete_queryID","queryID","getAlgoliaResults"],"mappings":"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"}