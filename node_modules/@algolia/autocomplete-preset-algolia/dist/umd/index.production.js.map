{"version":3,"file":"index.production.js","sources":["../../src/highlight/getAttributeValueByPath.ts","../../src/constants/index.ts","../../src/highlight/parseAttribute.ts","../../src/highlight/parseAlgoliaHitHighlight.ts","../../src/highlight/reverseHighlightedParts.ts","../../src/highlight/parseAlgoliaHitSnippet.ts","../../src/search/search.ts","../../src/version.ts","../../src/search/getAlgoliaHits.ts","../../src/search/getAlgoliaResults.ts","../../src/highlight/parseAlgoliaHitReverseHighlight.ts","../../src/highlight/parseAlgoliaHitReverseSnippet.ts"],"sourcesContent":["export function getAttributeValueByPath<THit>(hit: THit, path: string): any {\n  const parts = path.split('.');\n  const value = parts.reduce((current, key) => current && current[key], hit);\n\n  return value;\n}\n","export const HIGHLIGHT_PRE_TAG = '__aa-highlight__';\nexport const HIGHLIGHT_POST_TAG = '__/aa-highlight__';\n","import { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\n\nimport { ParsedAttribute } from './ParsedAttribute';\n\nconst htmlEscapes = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n};\n\ntype ParseAttributeParams = {\n  highlightedValue: string;\n  ignoreEscape?: string[];\n};\n\nexport function parseAttribute({\n  highlightedValue,\n  ignoreEscape = [],\n}: ParseAttributeParams): ParsedAttribute[] {\n  const unescapedHtmlRegex = new RegExp(\n    `[${Object.keys(htmlEscapes)\n      .filter((character) => ignoreEscape.indexOf(character) === -1)\n      .join('')}]`,\n    'g'\n  );\n  const hasUnescapedHtmlRegex = RegExp(unescapedHtmlRegex.source);\n\n  function escape(value: string) {\n    return hasUnescapedHtmlRegex.test(value)\n      ? value.replace(unescapedHtmlRegex, (key) => htmlEscapes[key])\n      : value;\n  }\n\n  const splitByPreTag = highlightedValue.split(HIGHLIGHT_PRE_TAG);\n  const firstValue = splitByPreTag.shift();\n  const elements = !firstValue\n    ? []\n    : [{ value: escape(firstValue), isHighlighted: false }];\n\n  splitByPreTag.forEach((split) => {\n    const splitByPostTag = split.split(HIGHLIGHT_POST_TAG);\n\n    elements.push({\n      value: escape(splitByPostTag[0]),\n      isHighlighted: true,\n    });\n\n    if (splitByPostTag[1] !== '') {\n      elements.push({\n        value: escape(splitByPostTag[1]),\n        isHighlighted: false,\n      });\n    }\n  });\n\n  return elements;\n}\n","import { warn } from '@algolia/autocomplete-shared';\nimport { Hit } from '@algolia/client-search';\n\nimport { getAttributeValueByPath } from './getAttributeValueByPath';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function parseAlgoliaHitHighlight<THit extends Hit<{}>>({\n  hit,\n  attribute,\n  ignoreEscape,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = `_highlightResult.${attribute}.value`;\n  let highlightedValue = getAttributeValueByPath(hit, path);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToHighlight\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToHighlight/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, attribute as string) || '';\n  }\n\n  return parseAttribute({\n    highlightedValue,\n    ignoreEscape,\n  });\n}\n","import { ParsedAttribute } from './ParsedAttribute';\n\nexport function reverseHighlightedParts(parts: ParsedAttribute[]) {\n  // We don't want to highlight the whole word when no parts match.\n  if (!parts.some((part) => part.isHighlighted)) {\n    return parts.map((part) => ({ ...part, isHighlighted: false }));\n  }\n\n  return parts.map((part) => ({ ...part, isHighlighted: !part.isHighlighted }));\n}\n","import { warn } from '@algolia/autocomplete-shared';\nimport { Hit } from '@algolia/client-search';\n\nimport { getAttributeValueByPath } from './getAttributeValueByPath';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function parseAlgoliaHitSnippet<THit extends Hit<{}>>({\n  hit,\n  attribute,\n  ignoreEscape,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = `_snippetResult.${attribute}.value`;\n  let highlightedValue = getAttributeValueByPath(hit, path);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToSnippet\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToSnippet/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, attribute as string) || '';\n  }\n\n  return parseAttribute({\n    highlightedValue,\n    ignoreEscape,\n  });\n}\n","import { MultipleQueriesQuery } from '@algolia/client-search';\nimport { SearchClient } from 'algoliasearch/lite';\n\nimport { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\nimport { version } from '../version';\n\nexport interface SearchParams {\n  searchClient: SearchClient;\n  queries: MultipleQueriesQuery[];\n}\n\nexport function search<TRecord>({ searchClient, queries }: SearchParams) {\n  if (typeof searchClient.addAlgoliaAgent === 'function') {\n    searchClient.addAlgoliaAgent('autocomplete-core', version);\n  }\n\n  return searchClient.search<TRecord>(\n    queries.map((searchParameters) => {\n      const { indexName, query, params } = searchParameters;\n\n      return {\n        indexName,\n        query,\n        params: {\n          hitsPerPage: 5,\n          highlightPreTag: HIGHLIGHT_PRE_TAG,\n          highlightPostTag: HIGHLIGHT_POST_TAG,\n          ...params,\n        },\n      };\n    })\n  );\n}\n","export const version = '1.0.0-alpha.38';\n","import { Hit } from '@algolia/client-search';\n\nimport { search, SearchParams } from './search';\n\nexport function getAlgoliaHits<TRecord>({\n  searchClient,\n  queries,\n}: SearchParams): Promise<Array<Array<Hit<TRecord>>>> {\n  return search<TRecord>({ searchClient, queries }).then((response) => {\n    const results = response.results;\n\n    return results.map((result) =>\n      result.hits.map((hit) => {\n        return {\n          ...hit,\n          __autocomplete_indexName: result.index,\n          __autocomplete_queryID: result.queryID,\n        };\n      })\n    );\n  });\n}\n","import { SearchResponse } from '@algolia/client-search';\n\nimport { search, SearchParams } from './search';\n\nexport function getAlgoliaResults<TRecord>({\n  searchClient,\n  queries,\n}: SearchParams): Promise<Array<SearchResponse<TRecord>>> {\n  return search<TRecord>({ searchClient, queries }).then((response) => {\n    return response.results;\n  });\n}\n","import { Hit } from '@algolia/client-search';\n\nimport { parseAlgoliaHitHighlight } from './parseAlgoliaHitHighlight';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\n\nexport function parseAlgoliaHitReverseHighlight<THit extends Hit<{}>>(\n  props: ParseAlgoliaHitParams<THit>\n): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitHighlight<THit>(props));\n}\n","import { Hit } from '@algolia/client-search';\n\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAlgoliaHitSnippet } from './parseAlgoliaHitSnippet';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\n\nexport function parseAlgoliaHitReverseSnippet<THit extends Hit<{}>>(\n  props: ParseAlgoliaHitParams<THit>\n): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitSnippet<THit>(props));\n}\n"],"names":["getAttributeValueByPath","hit","path","split","reduce","current","key","HIGHLIGHT_PRE_TAG","HIGHLIGHT_POST_TAG","htmlEscapes","parseAttribute","highlightedValue","ignoreEscape","unescapedHtmlRegex","RegExp","Object","keys","filter","character","indexOf","join","hasUnescapedHtmlRegex","source","escape","value","test","replace","splitByPreTag","firstValue","shift","elements","isHighlighted","forEach","splitByPostTag","push","parseAlgoliaHitHighlight","attribute","reverseHighlightedParts","parts","some","part","map","parseAlgoliaHitSnippet","search","searchClient","queries","addAlgoliaAgent","searchParameters","indexName","query","params","hitsPerPage","highlightPreTag","highlightPostTag","then","response","results","result","hits","__autocomplete_indexName","index","__autocomplete_queryID","queryID","props"],"mappings":";+QAAO,SAASA,EAA8BC,EAAWC,UACzCA,EAAKC,MAAM,KACLC,QAAO,SAACC,EAASC,UAAQD,GAAWA,EAAQC,KAAML,GCFjE,IAAMM,EAAoB,mBACpBC,EAAqB,oBCG5BC,EAAc,KACb,YACA,WACA,WACA,aACA,SAQA,SAASC,SACdC,IAAAA,qBACAC,aAAAA,aAAe,KAETC,EAAqB,IAAIC,kBACzBC,OAAOC,KAAKP,GACbQ,QAAO,SAACC,UAAmD,IAArCN,EAAaO,QAAQD,MAC3CE,KAAK,SACR,KAEIC,EAAwBP,OAAOD,EAAmBS,iBAE/CC,EAAOC,UACPH,EAAsBI,KAAKD,GAC9BA,EAAME,QAAQb,GAAoB,SAACP,UAAQG,EAAYH,MACvDkB,MAGAG,EAAgBhB,EAAiBR,MAAMI,GACvCqB,EAAaD,EAAcE,QAC3BC,EAAYF,EAEd,CAAC,CAAEJ,MAAOD,EAAOK,GAAaG,eAAe,IAD7C,UAGJJ,EAAcK,SAAQ,SAAC7B,OACf8B,EAAiB9B,EAAMA,MAAMK,GAEnCsB,EAASI,KAAK,CACZV,MAAOD,EAAOU,EAAe,IAC7BF,eAAe,IAGS,KAAtBE,EAAe,IACjBH,EAASI,KAAK,CACZV,MAAOD,EAAOU,EAAe,IAC7BF,eAAe,OAKdD,ECjDF,SAASK,SACdlC,IAAAA,IACAmC,IAAAA,UACAxB,IAAAA,aAEMV,6BAA2BkC,YAC7BzB,EAAmBX,EAAwBC,EAAKC,SAEpB,iBAArBS,IASTA,EAAmBX,EAAwBC,EAAKmC,IAAwB,IAGnE1B,EAAe,CACpBC,iBAAAA,EACAC,aAAAA,2rBC5BG,SAASyB,EAAwBC,UAEjCA,EAAMC,MAAK,SAACC,UAASA,EAAKT,iBAIxBO,EAAMG,KAAI,SAACD,iBAAeA,OAAMT,eAAgBS,EAAKT,mBAHnDO,EAAMG,KAAI,SAACD,iBAAeA,OAAMT,eAAe,OCGnD,SAASW,SACdzC,IAAAA,IACAmC,IAAAA,UACAxB,IAAAA,aAEMV,2BAAyBkC,YAC3BzB,EAAmBX,EAAwBC,EAAKC,SAEpB,iBAArBS,IASTA,EAAmBX,EAAwBC,EAAKmC,IAAwB,IAGnE1B,EAAe,CACpBC,iBAAAA,EACAC,aAAAA,ICnBG,SAAS+B,SAAkBC,IAAAA,aAAcC,IAAAA,cACF,mBAAjCD,EAAaE,iBACtBF,EAAaE,gBAAgB,oBCbV,kBDgBdF,EAAaD,OAClBE,EAAQJ,KAAI,SAACM,OACHC,EAA6BD,EAA7BC,UAAWC,EAAkBF,EAAlBE,MAAOC,EAAWH,EAAXG,aAEnB,CACLF,UAAAA,EACAC,MAAAA,EACAC,UACEC,YAAa,EACbC,gBAAiB7C,EACjB8C,iBAAkB7C,GACf0C,yBEvBN,mBAIEP,EAAgB,CAAEC,eAHzBA,aAGuCC,UAFvCA,UAEkDS,MAAK,SAACC,UACtCA,EAASC,QAEVf,KAAI,SAACgB,UAClBA,EAAOC,KAAKjB,KAAI,SAACxC,iBAEVA,OACH0D,yBAA0BF,EAAOG,MACjCC,uBAAwBJ,EAAOK,wCCZlC,mBAIEnB,EAAgB,CAAEC,eAHzBA,aAGuCC,UAFvCA,UAEkDS,MAAK,SAACC,UAC/CA,EAASC,2ECFb,SACLO,UAEO1B,EAAwBF,EAA+B4B,qCCHzD,SACLA,UAEO1B,EAAwBK,EAA6BqB"}