
/* ------------------------ Padding & Margin Classes ------------------------ */
@each $abbr, $name in ("t": "top", "r": "right", "b": "bottom", "l": "left") {
  @for $i from 1 through 20 {
    .m#{$abbr}-#{$i} {
      margin-#{$name}: 1rem * $i;
    }
  }
}

@each $abbr, $name in ("t": "top", "r": "right", "b": "bottom", "l": "left") {
  @for $i from 1 through 20 {
    .p#{$abbr}-#{$i} {
      padding-#{$name}: 1rem * $i;
    }
  }
}

/* -------------------------- Breakpoint Arguments -------------------------- */
// In the event of NOT using breakpoint observer
$break-small: 370px;
$break-medium: 920px;
$break-large: 1024px;

@mixin respond-to($media) {
  @if $media == smartphones {
    @media only screen and (max-width: $break-small) {
      @content;
    }
  } @else if $media == tablets {
    @media only screen and (min-width: $break-small + 1px) and (max-width: $break-medium) {
      @content;
    }
  } @else if $media == desktops {
    @media only screen and (min-width: $break-medium + 1) {
      @content;
    }
  }
}

/* ------------------------------- Containers ------------------------------- */
.container-sm {
  width: 30%;
  margin: auto;

  @include respond-to(tablets) {
    width: 70%;
  }
  @include respond-to(smartphones) {
    width: 95%;
  }
}
.container {
  width: 65%;
  margin: auto;

  @include respond-to(tablets) {
    width: 80%;
  }
  @include respond-to(smartphones) {
    width: 95%;
  }
}
.container-lg {
  width: 90%;
  margin: auto;

  @include respond-to(tablets) {
    width: 90%;
  }
  @include respond-to(smartphones) {
    width: 95%;
  }
}
.container-mobile {
  width: 95%;
  margin: auto;
}

/* -------------------------------------------------------------------------- */
/*                                   FLEXBOX                                  */
/* -------------------------------------------------------------------------- */
/*
    Had to add this, since @angular/flex-box doesn't work with Safari
*/
.flex-column { display: flex; flex-direction: column; }
.flex-row { display: flex; flex-direction: row; }

// Nowrap (wrap is default)
.nowrap { flex-wrap: nowrap; }

// Align Items
.align-start      { align-items: flex-start; }
.align-end        { align-items: flex-end; }
.align-center     { align-items: center; }
.align-stretch    { align-items: stretch; }
.align-baseline   { align-items: baseline; }

// Align Self
.align-self-start     { align-self: flex-start; }
.align-self-end       { align-self: flex-end; }
.align-self-center    { align-self: center; }
.align-self-stretch   { align-self: stretch; }
.align-self-baseline  { align-self: baseline; }

// Justify-Content
.justify-start    { justify-content: flex-start; }
.justify-end      { justify-content: flex-end; }
.justify-center   { justify-content: center; }
.justify-stretch  { justify-content: stretch; }
.justify-baseline { justify-content: baseline; }
.justify-between  { justify-content: space-between; }
.justify-around   { justify-content: space-around; }

// Justify Self
.justify-self-start     { justify-self:flex-start; }
.justify-self-end       { justify-self: flex-end; }
.justify-self-center    { justify-self: center; }
.justify-self-stretch   { justify-self: stretch; }
.justify-self-baseline  { justify-self: baseline; }
